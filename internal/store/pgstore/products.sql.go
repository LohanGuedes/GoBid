// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    seller_id, product_name, description,
    base_price, auction_start, auction_end
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateProductParams struct {
	SellerID     uuid.UUID          `json:"seller_id"`
	ProductName  string             `json:"product_name"`
	Description  string             `json:"description"`
	BasePrice    float64            `json:"base_price"`
	AuctionStart pgtype.Timestamptz `json:"auction_start"`
	AuctionEnd   pgtype.Timestamptz `json:"auction_end"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.SellerID,
		arg.ProductName,
		arg.Description,
		arg.BasePrice,
		arg.AuctionStart,
		arg.AuctionEnd,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductById = `-- name: GetProductById :one
SELECT 
    id,
    seller_id,
    product_name,
    description,
    base_price,
    auction_start,
    auction_end,
    is_sold
FROM products
WHERE id = $1
`

type GetProductByIdRow struct {
	ID           uuid.UUID          `json:"id"`
	SellerID     uuid.UUID          `json:"seller_id"`
	ProductName  string             `json:"product_name"`
	Description  string             `json:"description"`
	BasePrice    float64            `json:"base_price"`
	AuctionStart pgtype.Timestamptz `json:"auction_start"`
	AuctionEnd   pgtype.Timestamptz `json:"auction_end"`
	IsSold       bool               `json:"is_sold"`
}

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (GetProductByIdRow, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i GetProductByIdRow
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.ProductName,
		&i.Description,
		&i.BasePrice,
		&i.AuctionStart,
		&i.AuctionEnd,
		&i.IsSold,
	)
	return i, err
}

const getProductsByUser = `-- name: GetProductsByUser :many
SELECT
    id,
    seller_id,
    product_name,
    description,
    base_price,
    auction_start,
    auction_end,
    is_sold
FROM products
WHERE seller_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetProductsByUserParams struct {
	SellerID uuid.UUID `json:"seller_id"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

type GetProductsByUserRow struct {
	ID           uuid.UUID          `json:"id"`
	SellerID     uuid.UUID          `json:"seller_id"`
	ProductName  string             `json:"product_name"`
	Description  string             `json:"description"`
	BasePrice    float64            `json:"base_price"`
	AuctionStart pgtype.Timestamptz `json:"auction_start"`
	AuctionEnd   pgtype.Timestamptz `json:"auction_end"`
	IsSold       bool               `json:"is_sold"`
}

func (q *Queries) GetProductsByUser(ctx context.Context, arg GetProductsByUserParams) ([]GetProductsByUserRow, error) {
	rows, err := q.db.Query(ctx, getProductsByUser, arg.SellerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByUserRow
	for rows.Next() {
		var i GetProductsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.ProductName,
			&i.Description,
			&i.BasePrice,
			&i.AuctionStart,
			&i.AuctionEnd,
			&i.IsSold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveAndUpcomingAuctions = `-- name: ListActiveAndUpcomingAuctions :many
SELECT
    id,
    seller_id,
    product_name,
    description,
    base_price,
    auction_start,
    auction_end,
    is_sold
FROM products
WHERE auction_end > now() AND is_sold = false
`

type ListActiveAndUpcomingAuctionsRow struct {
	ID           uuid.UUID          `json:"id"`
	SellerID     uuid.UUID          `json:"seller_id"`
	ProductName  string             `json:"product_name"`
	Description  string             `json:"description"`
	BasePrice    float64            `json:"base_price"`
	AuctionStart pgtype.Timestamptz `json:"auction_start"`
	AuctionEnd   pgtype.Timestamptz `json:"auction_end"`
	IsSold       bool               `json:"is_sold"`
}

func (q *Queries) ListActiveAndUpcomingAuctions(ctx context.Context) ([]ListActiveAndUpcomingAuctionsRow, error) {
	rows, err := q.db.Query(ctx, listActiveAndUpcomingAuctions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveAndUpcomingAuctionsRow
	for rows.Next() {
		var i ListActiveAndUpcomingAuctionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.ProductName,
			&i.Description,
			&i.BasePrice,
			&i.AuctionStart,
			&i.AuctionEnd,
			&i.IsSold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllProducts = `-- name: ListAllProducts :many
SELECT
    id,
    seller_id,
    product_name,
    description,
    base_price,
    auction_start,
    auction_end,
    is_sold
FROM products
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListAllProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListAllProductsRow struct {
	ID           uuid.UUID          `json:"id"`
	SellerID     uuid.UUID          `json:"seller_id"`
	ProductName  string             `json:"product_name"`
	Description  string             `json:"description"`
	BasePrice    float64            `json:"base_price"`
	AuctionStart pgtype.Timestamptz `json:"auction_start"`
	AuctionEnd   pgtype.Timestamptz `json:"auction_end"`
	IsSold       bool               `json:"is_sold"`
}

func (q *Queries) ListAllProducts(ctx context.Context, arg ListAllProductsParams) ([]ListAllProductsRow, error) {
	rows, err := q.db.Query(ctx, listAllProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllProductsRow
	for rows.Next() {
		var i ListAllProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.ProductName,
			&i.Description,
			&i.BasePrice,
			&i.AuctionStart,
			&i.AuctionEnd,
			&i.IsSold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLiveProductAuctions = `-- name: ListLiveProductAuctions :many
SELECT
    id,
    seller_id,
    product_name,
    description,
    base_price,
    auction_start,
    auction_end,
    is_sold
FROM products
WHERE auction_end > now() AND auction_start < now() AND is_sold = false
`

type ListLiveProductAuctionsRow struct {
	ID           uuid.UUID          `json:"id"`
	SellerID     uuid.UUID          `json:"seller_id"`
	ProductName  string             `json:"product_name"`
	Description  string             `json:"description"`
	BasePrice    float64            `json:"base_price"`
	AuctionStart pgtype.Timestamptz `json:"auction_start"`
	AuctionEnd   pgtype.Timestamptz `json:"auction_end"`
	IsSold       bool               `json:"is_sold"`
}

func (q *Queries) ListLiveProductAuctions(ctx context.Context) ([]ListLiveProductAuctionsRow, error) {
	rows, err := q.db.Query(ctx, listLiveProductAuctions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLiveProductAuctionsRow
	for rows.Next() {
		var i ListLiveProductAuctionsRow
		if err := rows.Scan(
			&i.ID,
			&i.SellerID,
			&i.ProductName,
			&i.Description,
			&i.BasePrice,
			&i.AuctionStart,
			&i.AuctionEnd,
			&i.IsSold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
